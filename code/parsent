#!/usr/bin/perl

# Library of Congress SKOS NT parser
# 2013 by John Mark Ockerbloom (ockerblo@pobox.upenn.edu)
#  Input: an alphabetically sorted uncompressed version of
#  the LCSH NT dump file  (currently at 
#   http://id.loc.gov/static/data/authoritiesnames.nt.skos.gz)
#  Output: 3 hash files with subject IDs, notes, and aliases

use lib "/home/LIBRARY/ockerblo/booksrc/nlib/";
use Encode;
use OLBP;
use OLBP::BookRecord;
use OLBP::Entities;
use OLBP::Hash;
use utf8;

my $TESTID = "sh85003545";

#my $skosntfile = $ARGV[0] || "skos-subjects-sorted.nt";
my $ntfile = $ARGV[0] || "skos-subjects-sorted.nt";
#my $ntfile = $ARGV[0] || "mads-subjects-sorted.nt ";
my $overridefile = "overrides-skos";
# my $overridefile = "overrides-mads";
#my $fmt = "mads";
my $fmt = "skos";

my $wikimap = "../wikimap";
my $fastmap = "../fast/locmap";

my $line = "";
my $numsubs = 0;

my $AUTHPREFIX   = "http://id.loc.gov/authorities";
my $DCPREFIX     = "http://purl.org/dc/terms";
my $FOAFPREFIX   = "http://xmlns.com/foaf/0.1";
my $MADSPREFIX   = "http://www.loc.gov/mads/rdf/v1";
my $OWLPREFIX    = "http://www.w3.org/2002/07/owl";
my $RDFPREFIX    = "http://www.w3.org/1999/02/22-rdf-syntax-ns";
my $RDFSPREFIX   = "http://www.w3.org/2000/01/rdf-schema";
my $SKOSPREFIX   = "http://www.w3.org/2004/02/skos/core";
my $SKOSXLPREFIX = "http://www.w3.org/2008/05/skos-xl";

my $TYPEPRED     =   $RDFPREFIX  . "#type";

my $ALT_PRED     =   $SKOSPREFIX . "#altLabel";
my $PREF_PRED    =   $SKOSPREFIX . "#prefLabel";
my $MEMBER_PRED  =   $SKOSPREFIX . "#member";
my $SKOS_NOTE    =   $SKOSPREFIX . "#note";
my $BROAD_MATCH  =   $SKOSPREFIX . "#broadMatch";
my $CLOSE_MATCH  =   $SKOSPREFIX . "#closeMatch";
my $EXACT_MATCH  =   $SKOSPREFIX . "#exactMatch";
my $NARROW_MATCH =   $SKOSPREFIX . "#narrowMatch";
my $IN_SCHEME    =   $SKOSPREFIX . "#inScheme";
my $NOTATION     =   $SKOSPREFIX . "#notation";

my $XL_ALT_PRED  =   $SKOSXLPREFIX . "#altLabel";
my $SEE_ALSO     =   $RDFSPREFIX . "#seeAlso";

my $SKOS_BROADER =   $SKOSPREFIX . "#broader";
my $SKOS_NARROWER=   $SKOSPREFIX . "#narrower";
my $SKOS_RELATED =   $SKOSPREFIX . "#related";

my $MADS_PREF        =   $MADSPREFIX . "#authoritativeLabel";
my $MADS_MEMBER      =   $MADSPREFIX . "#isMemberOfMADSCollection";
my $MADS_NOTE        =   $MADSPREFIX . "#note";
my $MADS_VARIANT     =   $MADSPREFIX . "#hasVariant";
my $MADS_VLABEL      =   $MADSPREFIX . "#variantLabel";
my $MADS_EARLIER     =   $MADSPREFIX . "#hasEarlierEstablishedForm";
my $MADS_USEFOR      =   $MADSPREFIX . "#useFor";
my $MADS_USEINSTEAD  =   $MADSPREFIX . "#useInstead";

my $MADS_BROADER =   $MADSPREFIX . "#hasBroaderAuthority";
my $MADS_NARROWER=   $MADSPREFIX . "#hasNarrowerAuthority";
my $MADS_RELATED =   $MADSPREFIX . "#hasReciprocalAuthority";

my $FOCUS        =   $FOAFPREFIX  . "/focus";

my $LABELTYPE       =   $SKOSXLPREFIX . "#Label";
my $SKOS_CONCEPT    =   $SKOSPREFIX . "#Concept";
my $MADS_AUTHORITY  =   $MADSPREFIX . "#Authority";
my $MADS_COMPLEX    =   $MADSPREFIX . "#ComplexSubject";
my $MADS_CONFERENCE =   $MADSPREFIX . "#ConferenceName";
my $MADS_CORPORATE  =   $MADSPREFIX . "#CorporateName";
my $MADS_FAMILY     =   $MADSPREFIX . "#FamilyName";
my $MADS_GENREFORM  =   $MADSPREFIX . "#GenreForm";
my $MADS_GEOGRAPHIC =   $MADSPREFIX . "#Geographic";
my $MADS_NAMETITLE  =   $MADSPREFIX . "#NameTitle";
my $MADS_PERSONAL   =   $MADSPREFIX . "#PersonalName";
my $MADS_TEMPORAL   =   $MADSPREFIX . "#Temporal";
my $MADS_TITLE      =   $MADSPREFIX . "#Title";
my $MADS_TOPIC      =   $MADSPREFIX . "#Topic";

my $CONCEPTSCHEME  = "$AUTHPREFIX#conceptScheme";

my $DELETED1 = "This authority record has been deleted";
my $DELETED2 = "This authority has been deleted";

my $COLLPREFIX = "$AUTHPREFIX/subjects/collection";
my $NAMECPREFIX = "$AUTHPREFIX/names/collection";

my %subscoll = (
   "${COLLPREFIX}_Subdivisions" => 1,
   "${COLLPREFIX}_GenreFormSubdivisions" => 1,
   "${COLLPREFIX}_GeographicSubdivisions" => 1,
   "${COLLPREFIX}_TemporalSubdivisions" => 1,
   "${COLLPREFIX}_TopicSubdivisions" => 1,
);

my %kidscoll = (
   "${COLLPREFIX}_LCSH_Childrens" => 1,
);

my %genrecoll = (
   "${COLLPREFIX}_GenreFormSubdivisions" => 1,
);

my %authcoll = (
   "${COLLPREFIX}_LCSHAuthorizedHeadings" => 1,
);

my %misccoll = (
   "${COLLPREFIX}_LCSH_General" => 1,
   "${NAMECPREFIX}_FRBRWork" => 1,
   "${COLLPREFIX}_SubdivideGeographically" => 1,
   "${COLLPREFIX}_SubdivideGeographicalIndirect" => 1,
);


my %kidscheme = (
   "$AUTHPREFIX#corporateNamesChildren" => 1,
   "$AUTHPREFIX#geographicNamesChildren" => 1,
   "$AUTHPREFIX#meetingsChildren" => 1,
   "$AUTHPREFIX#topicalTermsChildren" => 1,
   "$AUTHPREFIX#personalNamesChildren" => 1,
   "$AUTHPREFIX#uniformTitlesChildren" => 1,
);

my %subrelation = map {$_ => 1} 
   ($SKOS_BROADER, $SKOS_NARROWER, $SKOS_RELATED,
    $MADS_BROADER, $MADS_NARROWER, $MADS_RELATED);

my %expectedtype = map {$_ => 1} 
    ($SKOS_CONCEPT, $MADS_AUTHORITY, $MADS_COMPLEX, $MADS_CORPORATE,
     $MADS_TOPIC, $MADS_FAMILY, $MADS_GENREFORM, $MADS_GEOGRAPHIC,
     $MADS_NAMETITLE, $MADS_TEMPORAL, $MADS_TITLE, $MADS_CONFERENCE);

my %schemes = (
   "$AUTHPREFIX#corporateNames" => 1,
   "$AUTHPREFIX#geographicNames" => 1,
   "$AUTHPREFIX#meetings" => 1,
   "$AUTHPREFIX#personalNames" => 1,
   "$AUTHPREFIX#topicalTerms" => 1,
   "$AUTHPREFIX#uniformTitles" => 1,
);

my %subdescs;
my $aliases = {};
my $dontbother = {}; # tracks Ids we shouldn't bother to add from secondary
my $inuse = {};      # tracks heavily normalized forms of subjects already used

sub packhashtofile {
  my ($name, $hashref) = @_;
  my $hash = new OLBP::Hash(name=>$name, filename=>"$name.hsh");
  return $hash->pack_to_file(hash=>$hashref);
}

sub error {
  my ($msg, $rec, $nonfatal) = @_;
  if ($rec) {
    my $id = $rec->{id};
    print "$id: ";
  }
  binmode STDOUT, ":utf8";
  print "$msg\n";
  if (!$nonfatal) {
    exit 0;
  }
}

sub crosslink_notes {
  my ($str, $labelids) = @_;
  my @parts = split / under /, $str;
  if (scalar(@parts) < 2) {
    return $str;
  }
  # print "Looking at $str\n";
  my @newparts;
  my $first = 1;
  foreach my $part (@parts) {
    if (!$first) {
      # print "Checking part $part\n";
      if ($part =~ /([A-Z][^\.]*)./) {
        my $candidate = lc(OLBP::Entities::normalize_entities($1));
        # print "trying candidate $candidate with $labelids\n";
        if ($labelids->{$candidate}) {
          # print "$str: found $candidate\n";
          $part =~ s/([A-Z][^\.]*)/\[\[$1\]\]/;
        }
      }
    } else {
      $first = 0;
    }
    push @newparts, $part;
  }
  return join " under ", @newparts;
}

sub unparse {
  my ($rec, $recs, $labelids) = @_;
  my $str = "";
  if (!$rec) {
    return $str;
  }
  foreach my $attr ("SN", "UF", "BT", "NT", "RT") {
    foreach my $item (@{$rec->{$attr}}) {
      if ($attr =~ /BT|NT|RT/) {
        my $orec = $recs->{$item};
        my $name;
        # bug that topical term can point to a deleted term;
        # report but miss for now
        if ($orec) {
          $name = $orec->{name};
        } else {
          if ($internal_label{$item}) {
            $name = $internal_label{$item};
          } else {
            next;
          }
        }
        # if (!$orec) {
        #   error("couldn't find id $item", $rec);
        # }
        if (!$name) {
          if ($ohash->{$item}) { 
            $name = $ohash->{$item};
          } else {
            error("empty name for id $item", $orec, 1);
            next;
          }
        }
        $item = $name;
      }
      # $item = decode("utf8", $item);
      $item =~ s/(\S)--(\w)/$1 -- $2/g;
      $item = OLBP::Entities::entitize_utf8($item);
      # scope notes now come with cross-refs bracketed; don't have to mark
      # if ($attr eq "SN") {
      #   $item = crosslink_notes($item, $labelids);
      #  }
      $str .= "$attr $item\n";
    }
  }
  return $str;
}

my %buffered_triple;
my %hiteof;

sub get_subject_id {
  my ($triple) = @_;
  return $triple->[0];
}

sub get_predicate_uri {
  my ($triple) = @_;
  my $pred = $triple->[1];
  if ($pred =~ /^<(.*)>$/) {
    # may need to unescape uri; not doing for now";
    return $1;
  }
  return undef;  #legit if not there
  # error("$pred not a brackets URI (in $triple->[0]|$triple->[1]|$triple->[2]");
}

# returns the string plus some info about its content

sub get_object_details {
  my ($triple) = @_;
  my $str = $triple->[2];
  if ($str =~ /^<(.*)>$/) {
    return ($1, "URI");
  }
  if ($str =~ /^\"(.*)\"\@([A-Za-z][A-Za-z])$/) {
    return ($1, $2);
  }
  if ($str =~ /^\"(.*)\"\^\^<(.*)>$/) {
    return ($1, $2);
  }
  if ($str =~ /^\"(.*)\"$/) {
    return ($1, undef);
  }
  if ($str =~ /^_:/) {
    return ($str, "INTERNAL");
  }
  error("don't know how to process object $str");
}

sub n3_unescape {
  my $str = shift;
  $str =~ s/\\u(....)/chr(hex($1))/ge;
  return $str;
}

sub get_next_triple {
  my ($fh) = @_;
  my $line;
  while (!eof($fh)) {
    $line = <$fh>;
    chop $line;
    $line =~ s/^\s*//;
    last if ($line && !($line =~ /^#/));
  }
  if (eof($fh)) {
    return undef;
  }
  $line =~ s/\s*\.\s*$//;
  $line = n3_unescape($line);
  # Some id.loc.gov URIs are inconsistently https: -- turn all into http:
  #  (commented out lines below are for testing this)
  # my $oldline = $line;
  $line =~ s!<https://id.loc.gov!<http://id.loc.gov!g;
  #if ($oldline ne $line) {
  #  print "$oldline is now $line\n";
  #}
  my @list = split /\s+/, $line, 3;
  return \@list;
}

sub next_entity {
  my ($fh) = @_;
  my $tripleslist = [];
  my $id = undef;
  return undef if (!$fh || ($hiteof{$fh}));
  my $triple = $buffered_triple{$fh};
  if ($triple) {
    push @{$tripleslist}, $triple;
    $buffered_triple{$fh} = "";
    $id = get_subject_id($triple);
  }
  while (1) {
    $triple = get_next_triple($fh);
    if (!$triple) {
      if (!scalar(@{$tripleslist})) {
        return undef;
      }
      return $tripleslist;
    }
    my $tid = get_subject_id($triple);
    if (!$tid) {
      print STDERR "Error: Could not find triple ID\n";
      return $tripleslist;
    }
    if ($id && ($tid ne $id)) {
      $buffered_triple{$fh} = $triple;
      return $tripleslist;
    }
    $id = $tid;
    push @{$tripleslist}, $triple;
  }
}

sub entity_id {
  my ($entity) = @_;
  return undef if (!$entity || !($entity->[0]));
  return get_subject_id($entity->[0]);
}

my %internal_label; 

sub read_overrides {
  my ($fname) = @_;
  open IN, "< $fname" or return 0;
  binmode(IN, ":utf8");
  my $overhash;
  while (my $line = <IN>) {
    next if ($line =~ /^#/);
    if ($line =~ /^(\S*)\s+(.*)/) {
      $overhash->{$1} = $2;
    }
  }
  close IN;
  return $overhash;
}

my $secondaryname;

sub get_names_from_secondary_file {
  my ($fname) = @_;
  open IN, "< $fname" or return 0;
  binmode(IN, ":utf8");
  while (my $line = <IN>) {
    if ($line =~ m!^<https?://id.loc.gov/authorities/subjects/(\S*)>\s+<$PREF_PRED>\s+\"(.*)\"\@en!) {
      $secondaryname->{$1} = n3_unescape($2);
    }
  }
}

# Eventually we might go back to the secondary (SKOS) file and
# fill in what we can from it, 
#  but for now we'll just create simple records with the ID and name

sub add_empty_recs_from_secondary {
  my ($recs, $labelids) = @_;
  foreach my $id (keys %{$secondaryname}) {
    if ($secondaryname->{$id} && !defined($recs->{$id}) &&
        !($dontbother->{$id})) {
      # Don't add the FAST-based records
      next if ($id =~ /-781$/);
      my $rec = {};
      $rec->{id} = $id;
      $rec->{name} = $secondaryname->{$id};
      $recs->{$id} = $rec;
      print "Adding rec $id ($rec->{name})\n";
      my $label = normalizelabel($rec->{name});
      if (!$labelids->{$label}) {
        $labelids->{$label} = $id;
      }
    }
  }
}

my %skos_blank_alts = ("sh2022005397" => 1);
# my %skos_invalid_ids = ("sh2018001858" => 1);

sub n3_entity_record {
  my ($entity, $id, $ohash) = @_;
  my $rec = {};
  $rec->{NT} = [];
  $rec->{BT} = [];
  $rec->{RT} = [];
  $rec->{UF} = [];
  $rec->{SN} = [];
  if (!($id =~ /^(sh|sj)/)) {
    error("unusual id: $id", $rec);
  }
  $rec->{id} = $id;
  if ($secondaryname->{$id}) {
    $rec->{name} = $secondaryname->{$id};
  }
  if ($rec->{id} =~ /^sj/) {
    # mark this entry as for kids (we prob. won't use it therefore)
    # print "This is a kids entry starting with sj\n";
    $rec->{kids} = 1;
  }
  foreach my $triple (@{$entity}) {
    #if (!($triple->[1])) {
    #   error("Couldn't find a predicate", $rec);
    #}
    my $pred = get_predicate_uri($triple);
    my ($obj, $objtype) = get_object_details($triple);
    # special case: _:LL is an undefined entity; ignore all assertions w it
    next if ($objtype eq "INTERNAL" && $obj eq "_:LL");
    if ($pred eq $MEMBER_PRED || $pred eq $MADS_MEMBER) {
       if ($subscoll{$obj}) {
         # mark this entry as a subdivision (we prob. won't use it therefore)
         $rec->{sub} = 1;
       } elsif ($kidscoll{$obj}) {
         # mark this entry as for kids (we prob. won't use it therefore)
         $rec->{kids} = 1;
       } elsif ($genrecoll{$obj}) {
         # mark this entry as genre (we prob. won't use it therefore)
         $rec->{genre} = 1;
       } elsif ($obj =~ /_PatternHeading/) {
         # ignore the PatternHeading categories
       } elsif ($obj =~ /UntracedReference/) {
         # and the UntracedReference categories
       } elsif ($obj =~ /FRBRExpression/) {
         # for now, the FRBRExpression categories get included
         # but we do nothing special with this classification
       } elsif (!$authcoll{$obj} && !$misccoll{$obj}) {
         error("Unexpected $fmt scheme: $obj\n", $rec);
       }
    } elsif ($pred eq $TYPEPRED) {
      if ($obj eq $LABELTYPE) {
        $rec->{deleted} = 1;
        next;
      } elsif ($obj eq $MADS_PERSONAL) {
         # This seems to just be stubs and a few accidental subjects
         #  which we can consider deleted
        $rec->{deleted} = 1;
      # } elsif ($obj =~ /(\#DeprecatedAuthority|\#Variant)/) {
      } elsif ($obj =~ /\#DeprecatedAuthority/) {
         # Consider deprecated authorities deleted
        $rec->{deleted} = 1;
      } elsif ($obj =~ /\#Variant/) {
         # Variant without DeprecatedAuthority is OK
      } elsif ($obj =~ /\#HierarchicalGeographic/) {
        # I only saw one odd nonstandard sub with this; consider it deleted
        $rec->{deleted} = 1;
      } elsif (!$expectedtype{$obj}) {
        error("Unrecognized type: $obj\n");
      }
    } elsif ($pred eq $IN_SCHEME) {
      if ($obj ne "$AUTHPREFIX/subjects") {
        error("Unrecognized scheme: $obj\n");
      }
    } elsif ($pred eq $PREF_PRED || $pred eq $MADS_PREF) {
      if ($rec->{name}) {
        if ($ohash && $ohash->{$id}) {
          if ($ohash->{$id} eq "CANCELLED") {
            error("skipping cancelled entry", $rec, 1);
            next;
          }
          $rec->{name} = $ohash->{$id};
          error("putting $ohash->{$id} into conflicted record", $rec, 1);
        } elsif ($rec->{name} ne $obj) {
          if (($rec->{name} ne $obj . ".") && (!($obj =~ /^_\:n/))) {
            error("already had a name ($rec->{name}) when we hit $obj", $rec, 1);
          }
        }
      } else {
        $rec->{name} = $obj;
      }
      #if ($id eq $TESTID) {
      #  print "SEEING THE ID $id now named $rec->{name}\n";
      #}
    } elsif ($pred eq $ALT_PRED || $pred eq $SKOS_NOTE
             || $pred eq $MADS_NOTE || $pred eq $MADS_VLABEL) {
      if ($objtype && uc($objtype) ne "EN") {
        error("unexpected language: $objtype", $rec);
      }
      if (!$obj) {
        if ($skos_blank_alts{$rec->{id}}) {
          error("skipping expected blank altlabel", $rec, 1);
        } else {
          error("unexpected (blank?) altlabel: $obj", $rec);
        }
      }
      if ($obj =~ /,\s*$/) {
        # this is a truncated label; ignore it
        # error("oddly truncated label: $label", $rec, 1);
        next;
      }
      if ($pred eq $ALT_PRED || $pred eq $MADS_VLABEL) {
        # print "Adding $obj as UF via label\n";
        push @{$rec->{UF}}, $obj;
      } elsif ($pred eq $SKOS_NOTE || $pred eq $MADS_NOTE) {
        push @{$rec->{SN}}, $obj;
      }
    } elsif ($pred eq $MADS_VARIANT || $pred eq $MADS_EARLIER
             || $pred eq $MADS_USEFOR) {
      # other MADS ways of doing alternate forms 
      # (Note that the USEFOR ref might not work if the other subject
      #   is later in file, but it looks like USEFOR is not used much now
      #   and often goes to dead subjects.  The other two predicates
      #   go to blank nodes, which we've already seen)
        # print "Adding " . $internal_label{$obj} . " ($obj) as UF via blank node\n";
      if ($internal_label{$obj}) {
        push @{$rec->{UF}}, $internal_label{$obj};
      }
    } elsif ($subrelation{$pred}) {
      my $aid = "";
      if ($objtype eq "INTERNAL") {
        $aid = $obj;
      } elsif ($objtype eq "URI") {
        if ($obj =~ m!ubjects/(\w+)$!) {
          $aid = $1;
        } elsif ($obj =~ m!info:lc/authorities/(sh\w+)$!) {
          # Odd special case in May 2016 dump (fortunately only one)
          #  that doesn't seem to go to a sensible URIk
          error("unexpected info object $obj value", $rec, 1);
          next;
        }
      } else {
        error("unexpected relation to non-URI: $obj", $rec);
      }
      if ($aid) {
        if ($pred eq $SKOS_NARROWER || $pred eq $MADS_NARROWER) {
          push @{$rec->{NT}}, $aid;
        } elsif ($pred eq $SKOS_BROADER || $pred eq $MADS_BROADER) {
          push @{$rec->{BT}}, $aid;
        } elsif ($pred eq $SKOS_RELATED || $pred eq $MADS_RELATED) {
          push @{$rec->{RT}}, $aid;
        }
      } else {
        error("unexpected $pred: $obj", $rec);
      }
    } elsif ($pred =~ /$MADSPREFIX#(deletionNote|hasLaterEstablishedForm)/ ||
             $pred eq $MADS_USEINSTEAD) {
      # If we haven't already noticed rec is deleted, these are big hints
      $rec->{deleted} = 1;
    } elsif ($pred =~ /$SKOSXLPREFIX#/) {
      # For now, we can ignore SKOS-XL (all the XL alt labels
      #  also seem to be notes as normal SKOS altLabels)
    } elsif ($pred =~ /dc\/terms\/(created|modified)/) {
      # ignore creation and modification times
    } elsif ($pred eq $CLOSE_MATCH || $pred eq $EXACT_MATCH
               || $pred eq $NARROW_MATCH || $pred eq $BROAD_MATCH) {
      # these map to other ontologies; ignore for now
    } elsif ($pred eq $SEE_ALSO) {
      # currently just seems to be for deleted entities - ignore for now
    } elsif ($pred =~ /$SKOSPREFIX#(editorial|editorialNote|example|changeNote|historyNote)/) {
      # I think these are just internal notes we can ignore
      # "editorial" seems to be an erroneous name for editorialNote
    } elsif ($pred eq $NOTATION) {
       # when not _:LL, this seems to map to call number (& range)
       # this would be cool to record, but for now ignore
    } elsif ($pred eq $FOCUS) {
       # this seems to map to a URL showing a map of a real location
       # this would be cool to record, but for now ignore
    } elsif ($pred =~ /$MADSPREFIX#(usePatternCollection)/) {
       # MADS equivalent of PatternHeading - ignore here too
    } elsif ($pred =~ /$MADSPREFIX#classification/) {
       # LC call numbers for subjects - cool, but we ignore for now
    } elsif ($pred =~ /$MADSPREFIX#(editorialNote|exampleNote|historyNote)/) {
       # various MADS notes we can ignore
    } elsif ($pred =~ /$MADSPREFIX#(adminMetadata|componentList|elementList|hasSource|identifiesRWO)/) {
       # various other MADS predicates we can ignore
    } elsif ($pred =~ /$MADSPREFIX#(hasCloseExternalAuthority|hasExactExternalAuthority|hasBroaderExternalAuthority|hasNarrowerExternalAuthority)/) {
       # we may eventually want to mine these for crosswalking,
       # (e.g. we could use them to map LC or WP to German & French subs)
       #  but for now ignore
    } elsif ($pred =~ /$MADSPREFIX#isMemberOfMADSScheme/) {
       if (!($obj =~ m!http://id.loc.gov/authorities/subjects!)) {
          error("unexpected MADS scheme: $obj", $rec);
       }
    } elsif ($pred =~ /$OWLPREFIX#sameAs/) {
       # Not currently being used for internal matching, so ignore for now,
       #  but may be worth watching to see if we can get anything useful
    } elsif ($pred =~ m!http://id.loc.gov/vocabulary/identifiers!) {
       # Mappings to slightly different control number forms
       #  and a few internal local identifiers - can be ignored
    } elsif ($pred =~ m!$RDFSPREFIX#label!) {
       # Seems to be generic label used in some obsolete subjects
       #  (not an actual heading), so ignorable
    } else {
      error("unrecognized predicate: $pred", $rec);
    }
  }
  return $rec;
}

# Internal entities now come in all sizes.  We're mainly concerned
# with those that have preferred labels
#
sub process_internal_skos_entity {
  my ($entity, $eid, $ohash) = @_;
  #if (scalar(@{$entity}) != 2) {
  #   error("Unexpected size of internal entity.");
  #}
  if ((get_predicate_uri($entity->[0]) eq $TYPEPRED) &&
      (get_predicate_uri($entity->[1]) eq $PREF_PRED)) {
    my ($str, $lang) = get_object_details($entity->[1]);
    if (!$lang || uc($lang) eq "EN") {
      if ($ohash->{$eid}) {
        $internal_label{$eid} = $ohash->{$eid};
        #binmode(STDOUT, ":utf8");
        #print "$eid is $str\n";
      } else {
        $internal_label{$eid} = $str;
      }
      #binmode(STDOUT, ":utf8");
      #print "$eid is $str\n";
    } else {
       error("Unexpected language: $lang");
    }
  } else {
  # Lots of internal entities now; can ignore most
  #  error("Unexpected types in internal entity.");
  }
}

sub process_internal_mads_entity {
  my ($entity, $eid, $ohash) = @_;
  foreach my $triple (@{$entity}) {
    my $pred = get_predicate_uri($triple);
    if (($pred eq $MADS_PREF) || 
        (!$internal_label{$eid} && $pred eq $MADS_VLABEL)) {
      my ($str, $lang) = get_object_details($triple);
      if (!$lang || uc($lang) eq "EN") {
        if ($ohash->{$eid}) {
          $internal_label{$eid} = $ohash->{$eid};
          #binmode(STDOUT, ":utf8");
          #print "$eid is $internal_label{$eid}\n";
        } else {
          $internal_label{$eid} = $str;
        }
        #binmode(STDOUT, ":utf8");
        #print "$eid is $str\n";
      } else {
         error("Unexpected language: $lang");
      }
      last;
    }
  }
}

sub readfile {
  my ($fname, $ohash) = @_;
  open IN, "< $fname" or die "Cannot open $fname\n";
  binmode(IN, ":utf8");
  my $recs = {};
  my $labelids = {};
  my $icount = 0;
  my $scount = 0;
  while (my $entity = next_entity(IN)) {
    my $eid = entity_id($entity);
    if ($eid =~ /^(_:.*)/) {
      if ($fmt eq "mads") {
        process_internal_mads_entity($entity, $eid, $ohash);
      } else {
        process_internal_skos_entity($entity, $eid, $ohash);
      }
      $icount++;
    } elsif ($eid =~ m!^<$AUTHPREFIX/(childrensS|s)ubjects/(\w+)>!) {
      # print "adding a record\n";
      $eid = $2;
      #if ($skos_invalid_ids{$eid}) {
      #  error("skipping known bad subject ID $eid", 0, 1),
      #  $dontbother->{$eid} = 1;
      #  next;
      #}
      my $rec = n3_entity_record($entity, $eid, $ohash);
      #if ($eid =~ /$TESTID/) {
      #    print "$eid now has $rec\n";
      #}
      next if (!$rec || !$rec->{id});
      if ($rec->{kids} || $rec->{sub} || $rec->{genre} || $rec->{deleted}) {
        if ($eid =~ /$TESTID/) {
          print "Don't bother invoked for $eid: " . 
             "kids: " . $rec->{kids} . " sub: $rec->{sub} " . " genre: ". $rec->{genre} . " deleted: " . $rec->{deleted} . "\n";
        }
        $dontbother->{$eid} = 1;
        next;
      }
      $scount++;
      if (!($scount % 10000)) {
         print "$scount\n";
      }
      $recs->{$rec->{id}} = $rec;
      my $name = $rec->{name};
      my $label = normalizelabel($name);
      if ($id eq $TESTID) {
        print "Adding record for $id (name: $name, label $label\n";
      }
      if ($labelids->{$label}) {
        my $orec = $recs->{$labelids->{$label}};
        my $oname = $orec->{name};
          if ($name ne $oname) {
            error("name collision: $name and $oname ($labelids->{$label}; $label)",
                  $rec, 1);
          }
      } else {
        $labelids->{$label} = $rec->{id};
      }
    } elsif ($eid =~ m!^<info:!) {
      error("skipping unusual subject $eid", 0, 1),
      next;
    } elsif ($eid =~ m!subdiv.work|subjects>!) {
      error("skipping unusual subject $eid", 0, 1),
      next;
    } elsif ($eid =~ m!authorities/(genreForms|names)!) {
      # These are dangling subjects in the MADS file - ignore
      next;
    } elsif ($eid =~ m!id.loc.gov/vocabulary!) {
      # More dangling subjects in the MADS file - ignore
    } elsif ($eid =~ m!authorities//!) {
      # Double-slash subjects appear to be errors; correct subs also in file
      error("skipping unusual subject $eid", 0, 1),
      next;
    } elsif ($eid =~ m!\.>!) {
      # Subject IDs with periods appear to be errors; correct subs also in file
      error("skipping unusual subject $eid", 0, 1),
      next;
    } elsif ($eid =~ m!\-781\>!) {
      # The 781 seem to be redundant FAST terms?
      # error("skipping 781 subject $eid", 0, 1),
      next;
    } else {
       print "didn't expect $eid as a subject\n";
       exit 0;
    }
  }
  close IN;
  print "Got to the end\n";
  print "found $icount internal entities.\n";
  print "found $scount subject authorities.\n";
  return ($recs, $labelids);
}

sub normalizelabel {
  my ($str, $leavecaps) = @_;
  # my $item = decode("utf8", $str);
  my $item = $str;
  $item=~ s/(\S)--(\w)/$1 -- $2/g;
  # utf8::upgrade($item);
  if (!$leavecaps) {
    $item = lc($item);
  }
  $item = OLBP::Entities::normalize_utf8($item);
  return $item;
}

sub add_other_aliases {
  my ($fname, $inuse, $labelids, $aliases) = @_;
  print STDERR "going into $fname\n";
  if (!(open IN, "< $fname")) {
    print STDERR "can't find $fname\n";
    return 0;
  }
  print STDERR "here were are in $fname\n";
  binmode IN, ":utf8";
  while (<IN>) {
    next if (/^#/);
    if (/(.*)\|(.*)\|(.*)/) {
      my ($lcsub, $op, $wiki) = ($1, $2, $3);
      next if ($op eq "->");                 # only consider mappings from wiki
      # wiki term is in straight UTF8: entitize
      my $item = OLBP::Entities::entitize_utf8($wiki);
      # skip shorter aliases and Wikipedisms
      next if lc(substr($lcsub, 0, length($item))) eq lc($item);
      next if ($wiki =~ /(^List of)|disambiguation/);
      my $searchterm = simplified($item);
      # print "Considering $searchterm: " . ($inuse->{$searchterm} ? "BEENTHERE": "OK") . "\n";
      next if $inuse->{$searchterm};         # too close to existing term
      my $label = normalizelabel($lcsub);
      my $id = $labelids->{$label};
      next if (!$id);                       # couldn't find this subject
      if (defined($subdescs{$id})) {
        $subdescs{$id} .= "UF $item\n";
        $aliases->{$label} .= "|$item";
        $inuse->{$searchterm} = 1;          # don't let new alias be used again
        # print "Now adding $item as new UF in $label\n" 
      }
    }
  }
  close IN;
}

sub simplified {
  my $str = shift;
  $str = OLBP::BookRecord::sort_key_for_subject($str);
  $str =~ s/[\(\)]//g;
  return $str;
}

# start of main code

binmode STDOUT, ":utf8";

print "aliases is $aliases\n";

my $ohash = read_overrides($overridefile);
# get_names_from_secondary_file($skosntfile);
my ($recs, $labelids) = readfile($ntfile, $ohash);
add_empty_recs_from_secondary($recs, $labelids);
print "recs is $recs, labelids is $labelids\n";


foreach my $id (keys %{$recs}) {
  # print "id is $id\n";
  my $rec = $recs->{$id};
  my $name = $rec->{name};
  my $label = normalizelabel($name);
  my $subst = normalizelabel($name, 1);
  my $searchterm = simplified($label);
  $inuse->{$searchterm} = $id;
 
  my $desc = unparse($rec, $recs, $labelids);
  $subdescs{$id} = $desc;
  foreach my $alias (@{$rec->{UF}}) {
    my $key = normalizelabel($alias);
    $searchterm = simplified($key);
    $inuse->{$searchterm} ||= 1;
    if (lc($subst) ne $key) {
      $aliases->{$key} .= "|$subst";
      print "Adding $subst as UF for $key\n";
    }
  }
  # print "$id: $label ($name)\n$desc\n";
}

# If we're adding aliases from other vocabularies, best to do it here
# when we have the complete LCSH to consider

print "key count " . scalar(keys %{$aliases}) . "\n";
add_other_aliases($wikimap, $inuse, $labelids, $aliases);
print "key count " . scalar(keys %{$aliases}) . "\n";
add_other_aliases($fastmap, $inuse, $labelids, $aliases);
print "key count " . scalar(keys %{$aliases}) . "\n";

# Now write out file

packhashtofile("subjectids", $labelids);
packhashtofile("subjectnotes", \%subdescs);
packhashtofile("subjectalias", $aliases);

print "done\n";
