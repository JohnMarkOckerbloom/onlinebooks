#!/usr/bin/perl

use lib "/home/ockerblo/booksrc/nlib";
use OLBP::Hash;
use OLBP::Name;

# Configuration options go here

$datadir = "/home/ockerblo/bookdb/";
$idxdir  = "/mnt/onlinebooks/nonpublic/bookdb/";
if ($ARGV[0] eq "local") {
  $idxdir = $datadir;
}

$bfidx   = $datadir . "gutfile";
$bfhash  = $idxdir . "gutbooks.hsh";
$auhash  = $idxdir . "gutauthors.hsh";
$srhash  = $idxdir . "gutserials.hsh";

# date lists the number of the first PG release for a particular month
# It's in reverse order, so it's easy to add to the start

$date[9801] = "February 2006";
$date[9600] = "January 2006";
$date[9401] = "December 2005";
$date[9201] = "November 2005";
$date[9001] = "October 2005";
$date[8801] = "September 2005";
$date[8600] = "August 2005";
$date[8401] = "July 2005";
$date[8201] = "June 2005";
$date[8067] = "May 2005";
$date[7801] = "April 2005";
$date[7601] = "March 2005";
$date[7400] = "February 2005";
$date[7201] = "January 2005";
$date[7001] = "December 2004";
$date[6800] = "November 2004";
$date[6601] = "October 2004";
$date[6400] = "September 2004";
$date[6201] = "August 2004";
$date[6001] = "July 2004";
$date[5801] = "June 2004";
$date[5600] = "May 2004";
$date[5400] = "April 2004";
$date[5201] = "March 2004";
$date[5001] = "February 2004";
$date[4801] = "January 2004";
$date[4701] = "December 2003";
$date[4601] = "November 2003";
$date[4501] = "October 2003";
$date[4401] = "September 2003";
$date[4301] = "August 2003";
$date[4201] = "July 2003";
$date[4101] = "June 2003";
$date[4001] = "May 2003";
$date[3901] = "April 2003";
$date[3801] = "March 2003";
$date[3701] = "February 2003";
$date[3601] = "January 2003";
$date[3551] = "December 2002";
$date[3501] = "November 2002";
$date[3451] = "October 2002";
$date[3401] = "September 2002";
$date[3351] = "August 2002";
$date[3301] = "July 2002";
$date[3251] = "June 2002";
$date[3201] = "May 2002";
$date[3151] = "April 2002";
$date[3101] = "March 2002";
$date[3051] = "February 2002";
$date[3001] = "January 2002";
$date[2941] = "December 2001";
$date[2891] = "November 2001";
$date[2841] = "October 2001";
$date[2791] = "September 2001";
$date[2741] = "August 2001";
$date[2691] = "July 2001";
$date[2651] = "June 2001";
$date[2611] = "May 2001";
$date[2571] = "April 2001";
$date[2531] = "March 2001";
$date[2491] = "February 2001";
$date[2451] = "January 2001";
$date[2415] = "December 2000";
$date[2379] = "November 2000";
$date[2343] = "October 2000";
$date[2307] = "September 2000";
$date[2271] = "August 2000";
$date[2235] = "July 2000";
$date[2199] = "June 2000";
$date[2163] = "May 2000";
$date[2127] = "April 2000";
$date[2091] = "March 2000";
$date[2055] = "February 2000";
$date[2019] = "January 2000";
$date[1983] = "December 1999";
$date[1947] = "November 1999";
$date[1911] = "October 1999";
$date[1875] = "September 1999";
$date[1839] = "August 1999";
$date[1801] = "July 1999";
$date[1765] = "June 1999";
$date[1729] = "May 1999";
$date[1693] = "April 1999";
$date[1657] = "March 1999";
$date[1621] = "February 1999";
$date[1585] = "January 1999";
$date[1549] = "December 1998";
$date[1513] = "November 1998";
$date[1477] = "October 1998";
$date[1441] = "September 1998";
$date[1405] = "August 1998";
$date[1369] = "July 1998";
$date[1333] = "June 1998";
$date[1297] = "May 1998";
$date[1261] = "April 1998";
$date[1225] = "March 1998";
$date[1189] = "February 1998";
$date[1153] = "January 1998";
$date[1121] = "December 1997";
$date[1089] = "November 1997";
$date[1057] = "October 1997";
$date[1029] = "September 1997";
$date[997] = "August 1997";
$date[961] = "July 1997";
$date[929] = "June 1997";
$date[897] = "May 1997";
$date[865] = "April 1997";
$date[833] = "March 1997";
$date[801] = "February 1997";
$date[769] = "January 1997";
$date[737] = "December 1996";
$date[705] = "November 1996";
$date[673] = "October 1996";
$date[641] = "September 1996";
$date[609] = "August 1996";
$date[577] = "July 1996";
$date[545] = "June 1996";
$date[513] = "May 1996";
$date[481] = "April 1996";
$date[449] = "March 1996";
$date[416] = "February 1996";
$date[384] = "January 1996";
$date[192] = "1995";
$date[96] = "1994";
$date[48] = "1993";
$date[23] = "1992";
$date[11] = "1991";
$date[1] = "Before 1991";

sub packhashtofile {
  my ($fname, $hashref) = @_;
  my $hash = new OLBP::Hash(name=>$fname, filename=>$fname);
  return $hash->pack_to_file(hash=>$hashref);
}

# shortername takes a string and a context, and if the context is already
# included in the name, gets rid of it

sub shortername {
  my ($name, $context) = @_;

  if ($name =~ /\s*$context\s+\((.*)\)\s*$/) {
    return $1;
  }
  return $name;
}

# keyit puts the string in the appropriate place in the book hash

sub keyit {
  my ($str, $num, $title, $serial, @names) = @_;
  my $name;
  my $countdown = int($num);
  if (!$num || ($num < 0)) {
    print "Error: No valid number:\n$str\n";
    exit 0;
  }
  if ($books{$num}) {
    print "Error: Duplicate number:\n$num\n";
    exit 0;
  }
  if ($countdown <=10000) {
    while ($countdown > 0) {
      if ($date[$countdown]) {
        $str .= "DATE $date[$countdown]\n";
        last;
      }
      $countdown--;
    }
  }
  $books{$num} = $str;
  foreach $name (@names) {
    if ($name =~ /\|\*/) {
      my $iname = OLBP::Name::informal($name);
      $name = OLBP::Name::formal($name);
      if (!$namebooks{$name}) {
        $namebooks{$name} = "|" . $iname . "|";
      }
    }
    $namebooks{$name} .= $num . " " . $title ."\n";
    # print "Namebooks is $namebooks{$name}\n";
  }
  if ($serial && $serial =~ /^(\d\S*)\s+(.*)/) {
    my $issue = $1;
    my $name = $2;
    if ($serialtext{$name}->{$issue}) {
      print "Error, ebook $num: Issue $issue of serial $name already taken\n";
      exit 0;
    }
    my $what = shortername($title, $name);
    $serialtext{$name}->{$issue} = $num . " " . $what;
  }
  return 1;
}

sub buildserialbooks {
  foreach my $name (keys %serialtext) {
    my %issuehash = %{$serialtext{$name}};
    foreach my $num (sort {$a <=> $b} keys %issuehash) {
      $serialbooks{$name} .= $issuehash{$num} ."\n";
    }
  }
}

sub readrecord {
  my ($attr, $val);
  my $str = "";
  my $num = 0;
  my $title = "";
  my $serial = "";
  my @names = ();
  while (<BOOKFILE>) {
    next if (/^#/);
    if (! /\S/ && $str) {
      return keyit($str, $num, $title, $serial, @names);
    }
    next if (! /\S/);
    $str .= $_;
    ($attr, $val) = split / /, $_, 2;
    chop($val);
    $val =~ s/\s*$//;
    if ($attr eq "NUMBER") {
      if ($num)  {
        print "Error: already seen number: $num\n";
        exit 0;
      }
      $num = $val;
    }
    if ($attr eq "TITLE") {
      $title = $val;
    }
    if ($attr eq "SERIAL") {
      $serial = $val;
    }
    if (($attr eq "AUTHOR") || ($attr eq "EDITOR") ||
        ($attr eq "TRANSLATOR") || ($attr eq "ILLUSTRATOR") ||
        ($attr eq "CONTRIBUTOR")) {
      push @names, $val;
    }
  }
  return keyit($str, $num, $title, $serial, @names);
}

%books = ();
open(BOOKFILE, $bfidx) || die("Cannot open $bfidx\n");

while (!eof(BOOKFILE)) {
  readrecord();
}
close BOOKFILE;

packhashtofile($bfhash, \%books);
packhashtofile($auhash, \%namebooks);

buildserialbooks();
packhashtofile($srhash, \%serialbooks);
