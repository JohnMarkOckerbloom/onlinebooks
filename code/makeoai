#!/usr/bin/perl
# 
# Script to generate OAI records
# for The Online Books Page
#
# Version of 2 Jan 2012
#
# Copyright 2001-2012 by John Mark Ockerbloom

BEGIN {
$OLBP::SCRIPTNAME = "book";
}

use lib "nlib";
use strict;
use OLBP;
use OLBP::OAI;


my $dbdir       = "/home/ockerblo/bookdb/";
my $idxdir      = $dbdir;
my $bookfile    = $dbdir . "bookfile";
my %oaibooks;

# set this back to 1 when our DLF OAI file works (it doens't now,
# because it's too big)
my $dodlf = 0;

my $oaidir = "/mnt/onlinebooks/nonpublic/oai";
my $archivesdir = $oaidir . "/archives";
my $protocol = "2.0";
my $bookoaidir = $archivesdir . "/onlinebooks";
my $bookdtfile = $bookoaidir . "/recordhash.datestamp-$protocol";
my $bookidfile = $bookoaidir . "/recordids-$protocol";
my $bookdcfile = $bookoaidir . "/recordhash.oai_dc-$protocol";
my $bookmdfile = $bookoaidir . "/recordhash.mods-$protocol";
my $bookdlffile = $bookoaidir . "/recordhash.dlfexpanded-$protocol";

my $bookdlfdata = $bookdlffile . ".dat";
my $dlfhashsize = 100000000;

# Need this to make compiler happy; should probably fix  OLBP module
# $OLBP::SCRIPTNAME = "";

# iso8601date is used for datestamps for OAI
# we're only doing date-level granularity

sub iso8601date {
  my $time = shift;
  if (!$time) {
    $time = time();
  }
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
                         gmtime($time);
  my $str = sprintf("%04d-%02d-%02d", ($year + 1900), ($mon+1), $mday);
  return $str;
}

sub packhashtofile {
  my ($name, $hashref, $fname) = @_;
  if (!$fname) {
    $fname = OLBP::hashfilename($name, $idxdir);
  }
  my $hash = new OLBP::Hash(name=>$name, filename=>$fname);
  return $hash->pack_to_file(hash=>$hashref);
}

# the dlfrecs are formatted :index:hash

sub get_hashpart {
  my $str = shift;
  if ($str =~ /^:\d*:\d*:(\d*)/) {
    return $1;
  }
  return undef;
}

sub makeoaifiles {
  my $now = iso8601date();
  my %datestamp;
  my @ids = keys %oaibooks;
  my (%dcstr, %modstr, %expandstr);
  my $id;
  my $oai = new OLBP::OAI();
  foreach $id (@ids) {
    $dcstr{$id} = $oai->oai_dc(record=>$oaibooks{$id});
    $modstr{$id} = $oai->oai_mods(record=>$oaibooks{$id});
    if ($dodlf) {
      $expandstr{$id} = $oai->oai_dlfexpanded(record=>$oaibooks{$id});
    }
  }
  my $olddc = new OLBP::Hash(name=>"olddc", filename=>$bookdcfile);
  my $oldmd = new OLBP::Hash(name=>"oldmd", filename=>$bookmdfile);
  my $olddlf;
  if ($dodlf) {
    $olddlf = new OLBP::Hash(name=>"oldmd", filename=>$bookdlffile);
  }
  my $olddt = new OLBP::Hash(name=>"olddt", filename=>$bookdtfile);
  my $dlfindex;

  if ($dodlf) {
    open DLFOUT, "> $bookdlfdata" or die "Can't open $bookdlfdata";
    $dlfindex = 0; 
  }

  if ($olddc && $olddt && $oldmd && $olddlf) {
    foreach $id (@ids) {
      my $dcrec = $olddc->get_value(key=>$id);
      my $mdrec = $oldmd->get_value(key=>$id);
      my $dlfrec = $olddlf->get_value(key=>$id);
      my ($dlfhash, $oldhash) = ("", "");
      if ($dodlf) {
        $dlfhash = $olddlf->hash($expandstr{$id}, $dlfhashsize);
        $oldhash = get_hashpart($dlfrec);
      }
      if ($dcrec eq $dcstr{$id} &&
          $mdrec eq $modstr{$id} &&
          $dlfhash eq $oldhash) {
        $datestamp{$id} = $olddt->get_value(key=>$id);
      }
      if ($dodlf) {
        print DLFOUT $expandstr{$id};
        my $len = length($expandstr{$id});
        $dlfrec = ":$dlfindex:$len:$dlfhash";
        $dlfindex += $len;
      }
    }
  }

  if ($dodlf) {
    close DLFOUT;
  }

  foreach $id (@ids) {
    if (!$datestamp{$id}) {
      $datestamp{$id} = $now;
    }
  }


  packhashtofile($bookdcfile, \%dcstr, $bookdcfile);
  packhashtofile($bookmdfile, \%modstr, $bookmdfile);
  if ($dodlf) {
    packhashtofile($bookdlffile, \%expandstr, $bookdlffile);
  }
  packhashtofile($bookdtfile, \%datestamp, $bookdtfile);

  # Okay, now time to pack an array of datestamps and identifiers

  @ids = sort {$datestamp{$a} cmp $datestamp{$b}} @ids;

  my $datestampwidth = 30;
  my $idwidth = 70;
  my $idcount = scalar(@ids);
  foreach $id (@ids) {
    if (length($id) > $idwidth) {
      $idwidth = length($id);
    }
  }
  open OUTFILE, ">$bookidfile" or die "Can't open $bookidfile";
  print OUTFILE "$idcount $datestampwidth $idwidth\n";
  foreach $id (@ids) {
    print OUTFILE pack("a$datestampwidth", $datestamp{$id});
    print OUTFILE pack("a$idwidth", $id);
  }
  close OUTFILE;
}

sub fatalerror {
  my $line = shift;
  my $problem = shift;
  print "Error, around line $line: $problem\n";
  exit 0;
}

sub addrecord {
  my $recstring = shift;
  my $br = new OLBP::BookRecord(string=>$recstring);

  if (!$br) {
    print "Didn't like:\n $recstring\n";
    fatalerror $., OLBP::BookRecord::get_format_error();
  }
  if (scalar($br->get_refs())) {
    my $id = $br->get_id();
    if (!($id =~ /^_i/)) {  # not a temporary ID
      $oaibooks{$id} = $br;
    }
  }
  # don't forget to add inherited names and subjects if applicable
  my $wid = $br->get_work();
  if ($wid) {
    my $work = $oaibooks{$wid};
    if ($work) {
      $br->inherit(from=>$work);
    }
  }
}

sub readbooks {
  my $recstring;
  my $line;
  open BOOKS, $bookfile or die "Can't open $bookfile";
  while ($line = <BOOKS>) {
    next if ($line =~ /^#/);
    if ($line =~ /^\s*$/) {
      if ($recstring) {
        addrecord($recstring);
      }
      $recstring = "";
    } elsif (!($line =~ /^[A-Z]+\+?\s+/)) {
      fatalerror $., "Unrecognized data line: $line";
    } else {
      $recstring .= $line;
    }
  }
  close BOOKS;
  if ($recstring) {
    addrecord($recstring);
  }
}

readbooks;
makeoaifiles;

exit 0;


