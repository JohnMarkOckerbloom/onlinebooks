#!/usr/bin/perl
use CGI;
use lib "/websites/OnlineBooks/nonpublic/lib";
use lib "nlib";
use OLBP;
use OLBP::SubmissionPool;

my $COOKIEDOMAIN = ".library.upenn.edu";
my $EMAIL_COOKIE = 'olbp_suggest_email';
my $NAME_COOKIE  = 'olbp_suggest_name';
my $REQOK_COOKIE = 'olbp_suggest_reqok';

my $SCRIPTNAME = "olbpcontact";

my $BADLINKFORMLINK     = "$SCRIPTNAME?type=badlink";
my $WANTLIBRARYFORMLINK = "$SCRIPTNAME?type=library";
my $BACKFILEFORMLINK    = "$SCRIPTNAME?type=backfile";
my $BIGSERIALFORMLINK   = "$SCRIPTNAME?type=bigserial";

my $MAXSIZE = 4000;

my $WPURL   = "https://en.wikipedia.org/";
my $OLBPURL = "https://onlinebooks.library.upenn.edu/";
my $FTLURL  = $OLBPURL . "webbin/ftl";
my $CINFOURL= $OLBPURL . "webbin/cinfo";
my $BFURL   = $OLBPURL . "webbin/backfile";
my $PENNBF  = $BFURL . "/penn-serials";
my $HATHIBF = $BFURL . "/hathitrust-us";
my $COPYURL = $OLBPURL . "cce/";
my $FPURL   = $COPYURL . "firstperiod.html";
my $REGURL  = "https://cocatalog.loc.gov/";

my $spamdir    = "spam";

my $badlinkparams = {
   type => "badlink",
   what => "bad link report", 
   again => "report another bad link", 
   dir => "badlinks",
   link => $BADLINKFORMLINK,
   askforpublicdisplay => 1,
};

my $wantlibraryparams = {
   type => "library",
   what => "library link request", 
   again => "request we add another library", 
   dir => "libraries",
   link => $WANTLIBRARYFORMLINK,
};

my $backfileparams = {
   type => "backfile",
   what => "submission", 
   again => "submit another serial", 
   dir => "backfile",
   link => $BACKFILEFORMLINK,
};

my $bigserialparams = {
   type => "bigserial",
   what => "submission", 
   again => "research another serial", 
   dir => "backfile",
   link => $BIGSERIALFORMLINK,
};

my $gateway = "172.16.34.184";

my $pagestarted = 0;

my $newstylesheet = qq!
.question {
  float: left;
  width: 25%;
  margin-top: 6px;
}

/* Floating column for inputs: 75% width */
.answer {
  float: left;
  width: 75%;
  margin-top: 6px;
}
.row:after {
  content: "";
  display: table;
  clear: both;
}
label {
  padding: 12px 12px 12px 0;
  display: inline-block;
}
!;

sub tag_form {
  my ($q) = @_;
  my $str = "";
  my $from = $q->remote_host();
  # We may just be getting our gateway's IP address; if so,
  # see if it's passing in the real requester's IP via an environment variable
  my $for = $ENV{'HTTP_X_FORWARDED_FOR'};
    if (($from eq $gateway) && $for) {
      $from = $for;
    }
  my $when = time();
  $str .= "FROM $from\n";
  $str .= "AT $when\n";
  return $str;
}

sub pageheader {
  my ($title, $ftl, $newstyle) = @_;
  my $app = ($ftl ? "FTL" : "The Online Books Page");
  my $style = "h2 {text-align: center}";
  if ($newstyle) {
    $style .= $newstylesheet;
  }
  my $str = qq^<!DOCTYPE html>
<html lang="en"><head>
<meta charset="utf-8">
<link rel="stylesheet" href="$OLBP::styleurl" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>$style</style>
^;
  $str .= "<title>$app: $title</title>";
  $str .= "</head>\n";
  if ($ftl) {
    $str .= "<body><header><h1>FTL: Forward to Libraries</h1></header>\n";
  } else {
    $str .= $OLBP::bodystart;
  }
  return $str;
}

sub startpage {
  my ($q, $title, $cookies, $ftl, $newstyle) = @_;
  if ($cookies) {
    print $q->header(-type=>  'text/html', -cookie=>$cookies, -charset => 'utf-8');
  } else {
    print $q->header(-type=>  'text/html', -charset => 'utf-8');
  }
  print pageheader($title, $ftl, $newstyle);
  $pagestarted = 1;
}

# stripspace removes interior newlines, excess spaces, leading and trailing

sub _stripspace {
  my ($str, $returnspace) = @_;
  return "" if (!$str);
  if (!$returnspace) {
    $str =~ s/[\n\r]//g;
  }
  $str =~ s/^\s+//;
  $str =~ s/\s+$//;
  $str =~ s/\s+/ /g;
  return $str;
}

sub cookiepopulate {
  my ($q) = @_;
  my $email = _stripspace($q->param("email"));
  my $name = _stripspace($q->param("name"));
  my $reqok = _stripspace($q->param("reqok"));
  my $save = _stripspace($q->param("save"));
  if (!$save) {
    return undef;
  }
  my $emailcookie = $q->cookie(-domain=>$COOKIEDOMAIN,
                           -name=>$EMAIL_COOKIE,
                           -value=>$email);
  my $namecookie = $q->cookie(-domain=>$COOKIEDOMAIN,
                           -name=>$NAME_COOKIE,
                           -value=>$name);
  my $reqokcookie = $q->cookie(-domain=>$COOKIEDOMAIN,
                           -name=>$REQOK_COOKIE,
                           -value=>$reqok);
  return [$emailcookie, $namecookie, $reqokcookie];
}

# to make things safe for forms, we omit quotes.

sub form_escape {
  my $str = shift;
  $str =~ s/[\"\']//g;
  return OLBP::html_encode($str);
}

sub tablerow {
  my ($caption, $field, %params) = @_;
  my $width = $params{width} || 60;
  my $style = qq!style="display:block"!;
  if ($params{hidden}) {
    $style = qq!style="display:none"!;
  }
  my $default = "";
  $default ||= $params{default};
  $default = form_escape($default);
  if (!($caption =~ /</)) {
    # If it doesn't already contain markup, bold and colonify the caption
    $caption = "<b>$caption:</b>";
  }
  return qq!<tr id="$field" $style><td><table><tr>
            <td style="width: 12em;">$caption</td>
            <td><input name="$field" size="$width" value="$default"></td>
            </tr></table></td></tr>\n!;
}

sub formrow {
  my (%params) = @_;
  my $caption = $params{caption};
  my $field = $params{fieldname};
  my $choices = $params{choice};
  my $blank = $params{withblank};
  my $width = $params{width} || 80;
  my $style = qq!style="display:block"!;
  if ($params{hidden}) {
    $style = qq!style="display:none"!;
  }
  my $default = "";
  $default ||= $params{default};
  $default = form_escape($default);
  #if (!($caption =~ /</)) {
  #  # If it doesn't already contain markup, bold and colonify the caption
  #  $caption = "<b>$caption</b>";
  #}
  if ($field) {
    $caption = qq!<label class="bigserial" for="$field">$caption</label>!;
  }
  my $input;
  if ($choices) {
    $input = qq!<select id="$field" name="$field">!;
    if ($blank) {
      $input .= qq!<option value="-" selected>- </option>!;
    }
    foreach my $choice (@{$choices}) {
      $input .= qq!<option value="$choice">$choice</option>!;
    }
    $input .= qq!</select>!;
  } else {
     $input =
       qq!<input name="$field" id="$field" size="$width" value="$default">!;
  }
  return qq!<div class="row" id="$field-row" $style>
            <div class="question">$caption</div>
            <div class="answer">$input</div>
            </div>\n!;
}


sub showpool {
  my ($dir) = @_;
  my $pool = new OLBP::SubmissionPool(name=>$dir);
  print "<hr><b>Status of all submissions via this form: </b>";
  my $count = $pool->get_count();
  if ($count) {
    my $what = ($count == 1 ? "submission" : "submissions");
    my $when = $pool->summarize_oldest_age();
    print "$count $what pending, oldest submitted $when.";
  } else {
    print "All submissions have been acted on.";
  }
  # print "<br>(Due to the editor's travels, you might not get a response before September.)"
}

sub default_bad_url {
  my $q = shift;
  my $referer = $q->referer();
  if ($referer =~ /book.lookupid/) {
    return $referer;
  }
  return undef;
}

sub makereplypart {
  my ($q, $params) = @_;
  print qq!<hr><b>Would you like a reply?</b> (optional)<br>!;
  print qq!<table>!;
  my $emaildefault = $q->cookie($EMAIL_COOKIE);
  my $namedefault = $q->cookie($NAME_COOKIE);
  my $reqokdefault = $q->cookie($REQOK_COOKIE);
  my $reqokcheck = ($reqokdefault ? qq!checked="1"! : "");
  print tablerow("Your email address", "email", default=>$emaildefault);
  print tablerow("Your name", "name", default=>$namedefault);
  print qq!</table>!;
  print qq!<input type="checkbox" name="save" value=1> Check this box to save your contact info in a cookie, so you don't have to re-enter it on later submissions.<br>!;
  if ($params->{askforpublicdisplay}) {
    print qq!<input type="checkbox" name="reqok" value=1 $reqokcheck> Check this box if you'd like this book and your contact info included in the public request list, if we can't find a working copy of this book online.  This will enable us or others to inform you when it becomes available.!;
  }
  print qq!<hr>!;
  print qq!<input type="submit" value="Submit this suggestion">!;
  my $type = $params->{type};
  print qq!<input type="hidden" name="type" value="$type">\n!;
  print qq!</form>!;
  print qq!<form action="$params->{link}">!;
  print qq!<input type="hidden" name="type" value="$type">\n!;
  print qq!<input type="submit" value="Start over">!;
  print qq!</form>!;
  showpool($params->{dir});
  print $OLBP::bodyend;
  exit 0;
}

sub backfileform {
  my ($q) = @_;
  my $issndefault = "";
  if ($q->param("qissn")) {
    $issndefault = $q->param("qissn");
  }
  my $titledefault = "";
  if ($q->param("qtitle")) {
    $titledefault = $q->param("qtitle");
  }
  &startpage($q, "Serial information form", 0, 0);
  print qq!<h2>Request or provide information on a serial</h2>!;
  print qq|
  <p>
  If you have information on copyright renewals for a serial you're
  interested in, or know of free online issues we don't yet list, please
  put that information in the appropriate spaces below.
  Any copyright or online issue information you submit here will
  be considered public domain data, publishable via a
  <a href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0 dedication</a>.
  </p>
  <p>
  If you don't have information on this serial, but would like us to further
  research it, you can just leave the information spaces blank and
  press the Submit button at the bottom of the form.
  </p>
  <p>
  Either way, we'll do what we can to incorporate that information into
  <a href="$OLBPURL">The Online Books Page</a>
  and <a href="$COPYURL">our copyright knowledge base</a>.
  If you leave your contact information, we can let you know what
  we've done.
  </p>
|;
  print qq!<form method="POST">!;
  print qq!<b>Tell us about the serial you're interested in</b> !;
  print qq!<br><table>!;
  print tablerow("Title", "title", default=>$titledefault);
  print tablerow("ISSN", "issn", default=>$issndefault);
  print tablerow("Location of (more) free online issues (if known)", "ref");
  print qq!</table>!;
  print qq!<hr><b>Do you have any information on this serial's copyrights, or anything else we should know?</b> (optional)<br>!;
  print qq!<textarea name="comments" rows="4" cols="60"></textarea>!;
  print qq!<p>!;
  my $olbpid = $q->param("qid");
  if ($olbpid) {
    my $url = "$CINFOURL/$olbpid";
    print qq!We have a <a href="$url">copyright information page</a> !;
    print qq!for this serial. !;
  } else {
    print qq!Periodicals with renewals before 1950 are listed in !;
    print qq!<a href="$FPURL">our first copyright renewals listings</a>. !;
  }
  print qq!Newer copyright registrations and renewals can be found in !;
  print qq!the <a href="https://cocatalog.loc.gov/">Copyright Office's !;
  print qq!registered works database</a>. Older ones can be found in !;
  print qq!the <a href="$COPYURL">Catalog of Copyright Entries</a>.</p>!;
  makereplypart($q, $backfileparams);
}

sub bigserialform {
  my ($q) = @_;
  my $issndefault = "";
  if ($q->param("qissn")) {
    $issndefault = $q->param("qissn");
  }
  my $titledefault = "";
  if ($q->param("qtitle")) {
    $titledefault = $q->param("qtitle");
  }
  &startpage($q, "Serial information form", 0, 0, 1);
  print qq!<h2>Request or provide information on a serial</h2>!;
  print qq|
  <p>
  If you have information on copyright renewals for a serial you're
  interested in, or know of free online issues we don't yet list, please
  put that information in the appropriate spaces below.
  Any copyright or online issue information you submit here will
  be considered public domain data, publishable via a
  <a target="deepcc0" href="https://creativecommons.org/share-your-work/public-domain/cc0/">CC0 dedication</a>.
  </p>
  <p>
  If you don't have information on this serial, but would like us to further
  research it, you can leave the information spaces blank and
  press the Submit button at the bottom of the form.  (We also have
  <a href="https://onlinebooks.library.upenn.edu/cce/serialcformhelp.html" target="deepdocs">more information on how to answer these questions</a>
  that you might find helpful.)
  </p>
  <p>
  Either way, we'll do what we can to incorporate that information into
  <a href="$OLBPURL" target="deepolbp">The Online Books Page</a>
  and <a href="$COPYURL" target="deepfirst">our copyright knowledge base</a>.
  If you leave your contact information, we can let you know what
  we've done.
  </p>
|;
  print qq!<form method="POST">!;
  my $bftable = $q->param("bftable");
  if ($bftable) {
    print qq!<input type="hidden" name="bftable" value="$bftable">\n!;
  }
  print qq!<section>!;
  print qq!<h3>Identify the serial you're interested in</h3> !;
  print formrow(caption=>"Title", fieldname=>"title", default=>$titledefault);
  print formrow(caption=>"ISSN", fieldname=>"issn", default=>$issndefault);
  print qq!</section>!;
  print qq!<hr><section>!;
  print qq!<h3>Provide information on this serial's copyrights</h3>!;
  my $olbpid = $q->param("qid");
  if ($olbpid) {
    my $url = "$CINFOURL/$olbpid";
    print qq!We have a <a href="$url">copyright information page</a> !;
    print qq!for this serial. !;
  } else {
    my $hint = "";
    if ($issndefault) {
      my $hinturl = "https://franklin.library.upenn.edu/catalog?utf8=%E2%9C%93&search_field=isxn_search&q=$issndefault";
      my $catalog = (($bftable =~ /^hathitrust/) ? "catalog" : "Franklin");
      my $whose = (($bftable =~ /^hathitrust/) ? "HathiTrust's" : "Penn's");
      if ($bftable =~ /^hathitrust/) {
        $hinturl =  "https://catalog.hathitrust.org/Search/Home?lookfor=$issndefault&searchtype=isn&filter[]=format%3ASerial";
      }
      $hint = qq! ($whose <a href="$hinturl" target="deepcatalog">$catalog record</a> may say.)!;
    }
    print formrow(caption=>
      "Does this serial originate in the US, or some other country?$hint",
      fieldname=>"origin", 
      choice=>["I can't tell", "US", "Some other country"]);
    print formrow(caption=>
     "If not the US, from what country does it originate?",
     fieldname=>"country");
    print formrow(caption=>"List signs, if any, of simultaneous US publication",
                  fieldname=>"simultaneous");
    my $firstrenewal = qq!<a href="$FPURL" target="deepfirst">first renewals page</a>!;
    print formrow(caption=>"Is this serial listed on our $firstrenewal?",
                  fieldname=>"listed", withblank=>1,
                 choice=>["Yes", "No"]);
    my $reg = qq!<a href="$REGURL" target="deepcocat">Copyright Office Catalog / Registered works database</a>!;
    print formrow(caption=>
                   "Are renewal records for this serial found in the $reg?",
                  fieldname=>"database", withblank=>1,
                 choice=>["Yes", "No"]);
    print formrow(caption=>"If so, what issue is the first with a renewal?",
                  fieldname=>"firstissue");
    print formrow(caption=>
                   "Are you able to tell if this serial has copyright notices?",
                  fieldname=>"cnotice",
                 choice=>["I can't tell",
                          "It has copyright notices",
                          "It does not have copyright notices"]);
  }
  print qq!<p><b>Is there anything else we should know or record about this serial's copyrights?</b> (If so, include it in the space below.)<br>!;
  print qq!<textarea name="comments" rows="4" cols="60"></textarea>!;
  print qq!<p>!;
  print qq!</section>!;
  print qq!<hr><section>!;
  print qq!<h3>Let us know about free online issues</h3>!;
  print qq!<p>Use the space below to include URLs about any free online
   volumes or issues you find. !;
  my $hathiurl = "https://catalog.hathitrust.org/";
  if ($titledefault) {
    $hathiurl .= "Search/Home?searchtype=title&ft=ft&setft=true&lookfor="
              . OLBP::url_encode($titledefault);
  }
  my $hathilink = qq!<a href="$hathiurl" target="deephathi">HathiTrust</a>!;
  my $iaurl = "https://archive.org/";
  if ($titledefault) {
    $iaurl .= "search.php?query=mediatype:(texts)%20AND%20" .
           OLBP::url_encode($titledefault);
  }
  my $ialink = qq!the <a href="$iaurl" target="deepia">Internet Archive</a>!;
  my $wcurl = "https://worldcat.org/";
  if ($issndefault) {
     $wcurl .= "search?qt=advanced&dblist=638&q=n2:$issndefault";
  } elsif ($titledefault) {
     $wcurl .= "search?qt=advanced&dblist=638&q=ti:"
              . OLBP::url_encode($titledefault);
  }
  my $wclink = qq!<a href="$wcurl" target="deepwc">WorldCat</a>!;
  my $pubtext = "a web search for the serial title";
  if ($titledefault) {
    my $searchurl = "https://www.google.com/search?q="
                    . OLBP::url_encode($titledefault);
    $pubtext = qq!<a href="$searchurl" target="deepsearch">$pubtext</a>!;
  }
  print qq!Good places to search include $hathilink, $ialink, $wclink!;
  print qq! and $pubtext.  Keep in mind that links on WorldCat !;
  print qq! and publisher sites may be available to users at your institution !;
  print qq! due to a subscription, or may require payment to access. !;
  print qq! Such content does not count as free for our purposes.!;
  print qq!</p>!;
  print qq!<textarea name="freestuff" rows="4" cols="60"></textarea>!;
  print qq!</section>!;
  makereplypart($q, $bigserialparams);
}


sub libraryform {
  my ($q) = @_;
  &startpage($q, "Request library links", 0, 1);
  print qq!<h2>REQUEST LINKS FOR YOUR LIBRARY</h2>!;
  print qq|
  <p>
  Would you like to enable links to your library's resources from sites like
  <a href="$OLBPURL">The Online Books Page</a>
  and <a href="$WPURL">Wikipedia</a>?
  If you tell us a little about your library, and
  we can work out how to link to its catalog or discovery application, you'll
  be able to follow links from selected Wikipedia articles,
   and Online Books Page subjects, 
  authors, and titles, to find similar titles that your library offers.
  (Read more about how this works  
  <a href="http://everybodyslibraries.com/2013/03/04/from-wikipedia-to-our-libraries/">with Wikipedia</a>
  and <a href="http://everybodyslibraries.com/2013/02/11/from-my-library-to-yours/">with the Online Books Page</a>.)
  </p>
  <p>
   If you leave your contact information, we can let you know when your library
   links are enabled, and how you can be directed straight to that library
   when following links from The Online
   Books Page.  (You can see the list of currently supported libraries,
   and select your
   own library, <a href="$FTLURL">here</a>.
   For best results, your library should use
   cataloging terms similar to those used by the US Library of Congress,
   and it should use a modern, link-friendly catalog or discovery application.)
  </p>
|;
  print qq!<form method="POST">!;
  print qq!<b>Tell us about the library you're interested in</b> !;
  print qq!<br><table>!;
  print tablerow("Library name", "libname");
  print tablerow("Address of library website", "libsite");
  print qq!</table>!;
  print qq!<hr><b>Anything we should know about making useful links to this library?</b> (optional)<br>!;
  print qq!<textarea name="comments" rows="4" cols="60"></textarea>!;
  # print qq!</table>!;
  makereplypart($q, $wantlibraryparams);
}

sub badlinkform {
  my ($q) = @_;
  &startpage($q, "Report bad links");
  print qq!<h2>REPORT BAD LINKS</h2>!;
  print qq|
  <p>
  Use this form to report a link 
  that doesn't go to the complete book you expect.  If we can verify,
  we'll try to replace the link with a working link as soon as we can
  (and often, fix other links to the same site).
  If we can't find a working link to the book in a reasonable time,
  we'll delist the entry.
  </p>
  <p>
   We need at least a title or a URL to investigate the problem.
   Everything else is optional, but the more you can tell us, the
   more likely we'll be able to respond to your satisfaction.
  </p>
|;
  print qq!<form method="POST">!;
  print qq!<b>What online book link is not working for you?</b> !;
  print qq!<br><table>!;
  print tablerow("Title", "title");
  print tablerow("Main author (if applicable)", "creator");
  print tablerow("URL tried", "ref", default=>default_bad_url($q));
  print qq!</table>!;
  print qq!<hr><b>What happened when you tried the link?</b> (optional)<br>!;
  print qq!<textarea name="comments" rows="4" cols="60"></textarea>!;
  print qq!<br><hr>!;
  print qq!<b>Do you know an alternate link that works for this title?</b> (optional)<br><table>!;
  print tablerow("Working URL", "wref");
  print qq!</table>!;
  makereplypart($q, $badlinkparams);
}


# if there's 4 or more hrefs in a comment, it's a good sign it's spam

sub spamcomment {
  my $SPAMLIMIT = 4;
  my $spamcount = 0;
  my $str = shift;
  return 1 if ($str =~ /googlegoogle/);
  while ($str =~ /href(.*)/i) {
    $str = $1;
    $spamcount += 1;
    return 1 if ($spamcount == $SPAMLIMIT);
  }
  return 0;
}

# if there's  a ref and wref that aren't URLs (no dots) but
# a comment that is, it's another good sign it's spam

# also with bad links if there's too many URLs that's probably spam
# or if it the ref is a single words with multiple case changes

sub spambadlink {
  my ($ref, $wref, $comments) = @_;
  if ($ref && $wref && $comments) {
    if (!($ref =~ /\./ || $wref  =~ /\./)) {
       return 1 if ($comments =~ /http:/);
       return 1 if ((!($ref =~ / /)) && $ref =~ /[a-z][A-Z].*[a-z][A-Z]/ &&
                    (!($wref =~ / /)) && $wref =~ /[a-z][A-Z].*[a-z][A-Z]/);
    }
  }
  # to take care of one annoying ugg/uggs spammer: ugg[s] but no dots
  if ($wref =~ /\buggs? / && !($wref =~ /\./)) {
    return 1;
  }
  my $SPAMLIMIT = 8;
  my $spamcount = 0;
  my $str = $comments;
  while ($str =~ /http:(.*)/i) {
    $str = $1;
    $spamcount += 1;
    return 1 if ($spamcount == $SPAMLIMIT);
  }
  return 0;
}

# if it's a bad-link report on an extended shelves book
# but has no title, and a comment with an http or a .com in it, 
# it's probably spam

sub spamsolicitation {
  my ($ref, $title, $comments) = @_;
  if (!$title && ($ref =~ /key=[a-np-z]/) && ($comments =~ /http|\.com/)) {
    return 1;
  }
  return 0;
}

sub analyze_form {
  my ($q, $params) = @_;
  my $str = "";
  my $pool;
  my $title = _stripspace($q->param("title"));
  my $issn = _stripspace($q->param("issn"));
  my $ref = _stripspace($q->param("ref"));
  my $wref = _stripspace($q->param("wref"));
  my $email = _stripspace($q->param("email"));
  my $name = _stripspace($q->param("name"));
  my $reqok = _stripspace($q->param("reqok"));
  my $libname = _stripspace($q->param("libname"));
  my $libsite = _stripspace($q->param("libsite"));
  my $comments = _stripspace($q->param("comments"), 1);
  my $cinfo = $q->param("cinfo");
  if ($cinfo) {
    $cinfo = _stripspace($cinfo, 1);
  }
  if ($email) {
    $email =~ s/\s//g;
    my $public = ($reqok ? "Y" : "N");
    $str .= "EMAIL $public $email $name\n"
  }
  if ($ref) {
    $str .= "REF $ref\n"
  }
  if ($creator) {
    $str .= "AUTHOR $creator\n"
  }
  if ($title) {
    $str .= "TITLE $title\n"
  }
  if ($issn) {
    $str .= "ISSN $issn\n"
  }
  if ($comments) {
    $str .= "COMMENT $comments\n"
  }
  if ($wref) {
    $str .= "WREF $wref\n"
  }
  if ($libname) {
    $str .= "LIBRARY $libname\n"
  }
  if ($libsite) {
    $str .= "URL $libsite\n"
  }
  # Now do the various big serials ones
  my @bigserialfields = ("origin", "country", "simultaneous",
                     "listed", "database", "firstissue", "cnotice",
                     "freestuff");
  foreach my $field (@bigserialfields) {
    if ($q->param($field)) {
      $str .= uc($field) . " " . _stripspace($q->param($field), 1)  . "\n";
    }
  }
  if (spamcomment($comments) || spambadlink($ref, $wref, $comments) ||
      spamsolicitation($ref, $title, $comments)
      || $email =~ /\@email.tst/
      || $email =~ /cergplwqx/
      || $email =~ /explainthebusiness/
      || $email =~ /seoxplorer/
      || $email =~ /arachni\@email/
      || $email =~ /egoriu8hs\@mail/
      || $title =~ /^About[a-z][a-z][a-z][a-z][a-z]/
      || $title =~ /^cheap /
      || $title =~ / sunglasses /
      || $title =~ /Unutty/
      || $title =~ /trump vote mask/
      || $title =~ /still.*business/i
      || $title =~ /earn money/i
      || $title =~ /quick question/i
      || $title =~ /dfdsf/
      || $title =~ /still running/
      || $title =~ /tax assistance/i
      || $title =~ /ister misery 1901/
      || $title =~ /amazing deal/i
      || $title =~ /googlegoogle/
      || $title =~ /jeffrearoom/
      || $ref =~ /seoestore/
      || $wref =~ /seoestore/
      || $comments =~ /getpeople.io/i
      || $comments =~ /pxl.to/i
      || $comments =~ /fiverrtalents/i
      || $comments =~ /ultimate tool/i
      || $comments =~ /your (business|company|sales)/i
      || $comments =~ /(network|digital|email|local) marketing/i
      || $comments =~ /unsub(marketing|scribe)/i
      || (($comments =~ /SEO/) && ($comments =~ /Google/))
      || (($comments =~ /SEO/) && ($comments =~ /http/))
      || $comments =~ /gift card/i
      || $comments =~ /freight forwarder/i
      || $comments =~ /issues.*website/i
      || $comments =~ /sexlovers/i
      || $comments =~ / robot/i
      || $comments =~ / AI /i
      || $comments =~ /salesai/i
      || $comments =~ /intimate photo/i
      || $comments =~ /business.*http/i
      || $comments =~ /afflat3e1.com/i
      || $comments =~ /pommellsmarketing/i
      || $comments =~ /renowebdesignnv/
      || $title =~ / michael kors /
      || $libname =~ / michael kors /
      || $libsite =~ /brinkster.net/) {
    $pool = new OLBP::SubmissionPool(name=>$spamdir);
  } else {
    $pool = new OLBP::SubmissionPool(name=>$params->{dir});
  }
  return ($str, $pool);
}

sub process_form {
  my ($q, $params) = @_;
  my ($str, $pool) = analyze_form($q, $params);
  if (length($str) > $MAXSIZE) {
    $str = substr($str, 0, $MAXSIZE);
    $str .= "[TRUNCATED]";
  }
  $str .= tag_form($q);
  my $success;
  if ($pool) {
    $success = $pool->record_submission(string=>$str);
  }
  my $cookies = cookiepopulate($q);
  if ($success) {
    &startpage($q, "Submission received", $cookies);
    print qq!<h2>Submission received</h2>!;
    print "<p>Thank you very much for your " . $params->{what};
    print ". We will act on it as soon as we can.</p>";
    print "<p>You can <a href=\"" . $params->{link};
    print "\">" . $params->{again} . "</a> or ";
    if ($params->{type} eq "backfile") {
      print qq!<a href="$BFURL">return to the Deep backfile page</a>
       or <a href="$OLBPURL">The Online Books Page</a>!;
    } elsif ($params->{type} eq "bigserial") {
      my $bftable = $q->param("bftable");
      my $bfurl = (($bftable =~ /^hathitrust/) ? $HATHIBF : $PENNBF);
      my $bfname = (($bftable =~ /^hathitrust/) ? "HathiTrust" : "Penn Libraries");
      print qq!<a href="$bfurl">return to the $bfname Deep backfile page</a>
       or <a href="$OLBPURL">The Online Books Page</a>!;
    } else {
      print qq!<a href="$OLBPURL">return to The Online Books Page</a>!;
      if ($q->param("libname") || $q->param("libsite")) {
         print qq! or <a href="$WPURL">Wikipedia</a>!;
      }
    }
    print qq!.</p>!;
    showpool($params->{dir});
  } else {
    &startpage($q, "Submission error");
    print qq!<h2>Submission error</h2>!;
    print qq!
<p>Sorry, we had technical difficulties and could not process your
    submission.  Please write to ockerblo\@pobox.upenn.edu with what you wanted to tell us,
    and mention that this error occurred.  If you put ERROR in your
    subject line, we'll try to expedite its handling.
</p>
    !;
  }
  print $OLBP::bodyend;
  exit 0;
}

sub tempdown {
  my ($q) = @_;
  &startpage($q, "Temporarily down");
  print qq!<h2>Service temporarily unavailable</h2>!;
  print qq!<p>This suggestion form is temporarily unavailable for a few hours!;
  print qq! on the afternoon of September 20 !;
  print qq!while we make some server adjustments.  It will be back soon. !;
  print qq!Apologies for the inconvenience.</p>!;
  print $OLBP::bodyend;
  exit 0;
}

my $q = new CGI;
my $cmd = $q->url(-path_info=>1);
$cmd =~ s/(.*)\///;

# &tempdown($q);

if (($q->param("type") eq "backfile") && 
    ($q->param("issn") || $q->param("title"))) {
  process_form($q, $backfileparams);
}
if (($q->param("type") eq "bigserial") && 
    ($q->param("issn") || $q->param("title"))) {
  process_form($q, $bigserialparams);
}
if ($q->param("libname") || $q->param("libsite")) {
  process_form($q, $wantlibraryparams);
}
if (!($q->param("type") =~ /backfile|bigserial/) && 
    ($q->param("ref") || $q->param("title"))) {
  process_form($q, $badlinkparams);
}
if ($q->param("type") eq "library") {
  &libraryform($q);
} elsif ($q->param("type") eq "backfile") {
  &backfileform($q);
} elsif ($q->param("type") eq "bigserial") {
  &bigserialform($q);
} else {
  &badlinkform($q);
}

# shouldn't reach here


print "Location: $OLBP::homepage\n\n";
exit 0;

